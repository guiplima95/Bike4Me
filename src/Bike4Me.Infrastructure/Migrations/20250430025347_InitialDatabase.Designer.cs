// <auto-generated />
using System;
using System.Collections.Generic;
using Bike4Me.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bike4Me.Infrastructure.Migrations
{
    [DbContext(typeof(Bike4MeContext))]
    [Migration("20250430025347_InitialDatabase")]
    partial class InitialDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("bike4me")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bike4Me.Domain.Bikes.Bike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("model_id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_bikes");

                    b.ToTable("bikes", "bike4me");
                });

            modelBuilder.Entity("Bike4Me.Domain.Bikes.BikeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EngineCapacity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("engine_capacity");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("Manufacturer", "Bike4Me.Domain.Bikes.BikeModel.Manufacturer#Manufacturer", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("manufacturer");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Bike4Me.Domain.Bikes.BikeModel.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Year", "Bike4Me.Domain.Bikes.BikeModel.Year#Year", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("year");
                        });

                    b.HasKey("Id")
                        .HasName("pk_bike_models");

                    b.ToTable("bike_models", "bike4me");
                });

            modelBuilder.Entity("Bike4Me.Domain.Couriers.Courier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("Cnpj", "Bike4Me.Domain.Couriers.Courier.Cnpj#Cnpj", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("character varying(14)")
                                .HasColumnName("cnpj");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Email", "Bike4Me.Domain.Couriers.Courier.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Bike4Me.Domain.Couriers.Courier.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("name");
                        });

                    b.HasKey("Id")
                        .HasName("pk_couriers");

                    b.ToTable("couriers", "bike4me");
                });

            modelBuilder.Entity("Bike4Me.Domain.Rentals.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ActualReturnDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("actual_return_date");

                    b.Property<Guid>("BikeId")
                        .HasColumnType("uuid")
                        .HasColumnName("motorcycle_id");

                    b.Property<Guid>("CourierId")
                        .HasColumnType("uuid")
                        .HasColumnName("courier_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpectedReturnDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expected_return_date");

                    b.Property<DateTime>("RentalEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rental_end_date");

                    b.Property<DateTime>("RentalStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rental_start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_price");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("RentalPlan", "Bike4Me.Domain.Rentals.Rental.RentalPlan#RentalPlan", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("AdditionalDailyFee")
                                .HasColumnType("numeric")
                                .HasColumnName("rental_plan_additional_daily_fee");

                            b1.Property<decimal>("DailyRate")
                                .HasColumnType("numeric")
                                .HasColumnName("rental_plan_daily_rate");

                            b1.Property<int>("Days")
                                .HasColumnType("integer")
                                .HasColumnName("rental_plan_days");

                            b1.Property<decimal>("PenaltyPercentage")
                                .HasColumnType("numeric")
                                .HasColumnName("rental_plan_penalty_percentage");
                        });

                    b.HasKey("Id")
                        .HasName("pk_rentals");

                    b.ToTable("rentals", "bike4me");
                });

            modelBuilder.Entity("Bike4Me.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("Email", "Bike4Me.Domain.Users.User.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Bike4Me.Domain.Users.User.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("name");
                        });

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", "bike4me");
                });

            modelBuilder.Entity("Bike4Me.Domain.Bikes.Bike", b =>
                {
                    b.OwnsOne("Bike4Me.Domain.Bikes.LicensePlate", "LicensePlate", b1 =>
                        {
                            b1.Property<Guid>("BikeId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(8)
                                .HasColumnType("character varying(8)")
                                .HasColumnName("license_plate");

                            b1.HasKey("BikeId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_Bikes_License_Plate_Unique");

                            b1.ToTable("bikes", "bike4me");

                            b1.WithOwner()
                                .HasForeignKey("BikeId")
                                .HasConstraintName("fk_bikes_bikes_id");
                        });

                    b.Navigation("LicensePlate")
                        .IsRequired();
                });

            modelBuilder.Entity("Bike4Me.Domain.Couriers.Courier", b =>
                {
                    b.OwnsOne("Bike4Me.Domain.Couriers.Cnh", "Cnh", b1 =>
                        {
                            b1.Property<Guid>("CourierId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Category")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("cnh_category");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)")
                                .HasColumnName("cnh_number");

                            b1.HasKey("CourierId");

                            b1.ToTable("couriers", "bike4me");

                            b1.WithOwner()
                                .HasForeignKey("CourierId")
                                .HasConstraintName("fk_couriers_couriers_id");
                        });

                    b.Navigation("Cnh")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
